{
  "rules": {
    ".read": false,
    ".write": false,
    "syncedValue": {
      ".read": true,
      ".write": true,
      ".validate": "newData.isString() && newData.val().length <= 100"
    },
    "talk": {
      ".read": true,
      "$message": {
        ".write": true,
        ".validate": "newData.hasChildren(['text'])",
        "text": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "users": {
      "$user": {
        ".read": "auth.uid === $user",
        ".write": "auth.uid === $user && (!newData.exists() || newData.hasChildren())",
        "email": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "businesses": {
      "$user":{
        ".read": "true",
        ".write": "auth.uid === $user && (!newData.exists() || newData.hasChildren())",
        "businessName": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        "phoneNumber": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        "active": {
          ".validate": "newData.isBoolean()"
        },
        "website": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        "city": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        "watching": {
          ".validate": "newData.isBoolean()"
        },
        "$other": {
          ".validate": false
        }

      }
    },
    "images": {
      "$user": {
        ".read": "true",
        "$imageId": {
          ".read": "true",
          ".write": "auth.uid === $user && (!newData.exists() || newData.hasChildren())",
          ".validate": "newData.hasChildren(['data'])",
          "data": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "truckNodes":{

      // Allow anyone to read only the truck locations
      ".read": true,

      // Index each location's geohash for faster querying
      ".indexOn": ["g"],

      // Schema validation
      "$key": {
        // Allow any authentication user to add, update, or remove keys in the GeoFire index
        ".write": "auth.uid == $key",
        // Key validation
        ".validate": "newData.hasChildren(['g', 'l']) && newData.getPriority().length <= 22 && newData.getPriority().length > 0",
        // Geohash validation
        "g": {
          ".validate": "newData.val() == newData.parent().getPriority()"
        },
        // Location coordinates validation
        "l": {
          "0": {
            ".validate": "newData.isNumber() && newData.val() >= -90 && newData.val() <= 90"
          },
          "1": {
            ".validate": "newData.isNumber() && newData.val() >= -180 && newData.val() <= 180"
          },
          "$other": {
            ".validate": false
          }
        },
        // Don't allow any other keys to be written
        "$other": {
          ".validate": false
        }
      }

    },
    "userNodes":{
      // Index each location's geohash for faster querying
      ".indexOn": ["g"],

      // Schema validation
      "$key": {
        // Only User can only read their location
        ".read": "auth.uid == $key",
        // Only current user to add, update, or remove keys in the GeoFire index
        ".write": "auth.uid == $key",
        // Key validation
        ".validate": "newData.hasChildren(['g', 'l']) && newData.getPriority().length <= 22 && newData.getPriority().length > 0",
        // Geohash validation
        "g": {
          ".validate": "newData.val() == newData.parent().getPriority()"
        },
        // Location coordinates validation
        "l": {
          "0": {
            ".validate": "newData.isNumber() && newData.val() >= -90 && newData.val() <= 90"
          },
          "1": {
            ".validate": "newData.isNumber() && newData.val() >= -180 && newData.val() <= 180"
          },
          "$other": {
            ".validate": false
          }
        },
        // Don't allow any other keys to be written
        "$other": {
          ".validate": false
        }
      }

    }
  }
}